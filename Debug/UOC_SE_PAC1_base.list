
UOC_SE_PAC1_base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002f1c  08002f1c  00003f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002fec  08002fec  00003fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002ff0  08002ff0  00003ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000009  20000000  08002ff4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000000c  08002ffd  0000400c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000078  08002ffd  00004078  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00004009  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000dd2b  00000000  00000000  0000403f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001c9c  00000000  00000000  00011d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000d40  00000000  00000000  00013a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000a2b  00000000  00000000  00014748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00030b48  00000000  00000000  00015173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000efb6  00000000  00000000  00045cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0013729f  00000000  00000000  00054c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0018bf10  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003770  00000000  00000000  0018bf54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006f  00000000  00000000  0018f6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08002f04 	.word	0x08002f04

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08002f04 	.word	0x08002f04

08000278 <UOC_GPIO_Init>:
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void UOC_GPIO_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b08a      	sub	sp, #40	@ 0x28
 800027c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
 800028c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b38      	ldr	r3, [pc, #224]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 8000290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000294:	4a36      	ldr	r2, [pc, #216]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800029e:	4b34      	ldr	r3, [pc, #208]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	613b      	str	r3, [r7, #16]
 80002aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	4b30      	ldr	r3, [pc, #192]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002b4:	f043 0302 	orr.w	r3, r3, #2
 80002b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002c2:	f003 0302 	and.w	r3, r3, #2
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ca:	4b29      	ldr	r3, [pc, #164]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002d0:	4a27      	ldr	r2, [pc, #156]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002da:	4b25      	ldr	r3, [pc, #148]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e8:	4b21      	ldr	r3, [pc, #132]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002ee:	4a20      	ldr	r2, [pc, #128]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002f0:	f043 0308 	orr.w	r3, r3, #8
 80002f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80002f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 80002fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80002fe:	f003 0308 	and.w	r3, r3, #8
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000306:	4b1a      	ldr	r3, [pc, #104]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 8000308:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800030c:	4a18      	ldr	r2, [pc, #96]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 800030e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000312:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000316:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <UOC_GPIO_Init+0xf8>)
 8000318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800031c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	2101      	movs	r1, #1
 8000328:	4812      	ldr	r0, [pc, #72]	@ (8000374 <UOC_GPIO_Init+0xfc>)
 800032a:	f000 fe13 	bl	8000f54 <HAL_GPIO_WritePin>

  /*Configure LED0 */
  GPIO_InitStruct.Pin = LED_0_Pin;
 800032e:	2301      	movs	r3, #1
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000332:	2301      	movs	r3, #1
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033a:	2300      	movs	r3, #0
 800033c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_0_GPIO_Port, &GPIO_InitStruct);
 800033e:	f107 0314 	add.w	r3, r7, #20
 8000342:	4619      	mov	r1, r3
 8000344:	480b      	ldr	r0, [pc, #44]	@ (8000374 <UOC_GPIO_Init+0xfc>)
 8000346:	f000 fc15 	bl	8000b74 <HAL_GPIO_Init>

  /* Configure JOYSTICK UP Button */
  GPIO_InitStruct.Pin = BUTTON_UP_Pin;
 800034a:	2308      	movs	r3, #8
 800034c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034e:	2300      	movs	r3, #0
 8000350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2300      	movs	r3, #0
 8000358:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUTTON_UP_GPIO_Port, &GPIO_InitStruct);
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	4619      	mov	r1, r3
 8000360:	4805      	ldr	r0, [pc, #20]	@ (8000378 <UOC_GPIO_Init+0x100>)
 8000362:	f000 fc07 	bl	8000b74 <HAL_GPIO_Init>
}
 8000366:	bf00      	nop
 8000368:	3728      	adds	r7, #40	@ 0x28
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	46020c00 	.word	0x46020c00
 8000374:	42021c00 	.word	0x42021c00
 8000378:	42020000 	.word	0x42020000

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	//To analyze
	HAL_Init();
 8000380:	f000 f99e 	bl	80006c0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000384:	f000 f820 	bl	80003c8 <SystemClock_Config>

	/* Initialize all configured peripherals - TO MODIFY */
	UOC_GPIO_Init();
 8000388:	f7ff ff76 	bl	8000278 <UOC_GPIO_Init>
	UOC_TIM6_Init();
 800038c:	f000 f90e 	bl	80005ac <UOC_TIM6_Init>

	HAL_TIM_Base_Start_IT(&htim6);
 8000390:	480a      	ldr	r0, [pc, #40]	@ (80003bc <main+0x40>)
 8000392:	f002 f965 	bl	8002660 <HAL_TIM_Base_Start_IT>

	/* Turn off LED_0 (negative logic) */
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
 8000396:	2201      	movs	r2, #1
 8000398:	2101      	movs	r1, #1
 800039a:	4809      	ldr	r0, [pc, #36]	@ (80003c0 <main+0x44>)
 800039c:	f000 fdda 	bl	8000f54 <HAL_GPIO_WritePin>

	/* Infinite loop */
	while (1)
	{
		if( 1 == HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) )
 80003a0:	2108      	movs	r1, #8
 80003a2:	4808      	ldr	r0, [pc, #32]	@ (80003c4 <main+0x48>)
 80003a4:	f000 fdbe 	bl	8000f24 <HAL_GPIO_ReadPin>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b01      	cmp	r3, #1
 80003ac:	d1f8      	bne.n	80003a0 <main+0x24>
			HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
 80003ae:	2200      	movs	r2, #0
 80003b0:	2101      	movs	r1, #1
 80003b2:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <main+0x44>)
 80003b4:	f000 fdce 	bl	8000f54 <HAL_GPIO_WritePin>
		if( 1 == HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) )
 80003b8:	e7f2      	b.n	80003a0 <main+0x24>
 80003ba:	bf00      	nop
 80003bc:	20000028 	.word	0x20000028
 80003c0:	42021c00 	.word	0x42021c00
 80003c4:	42020000 	.word	0x42020000

080003c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b09e      	sub	sp, #120	@ 0x78
 80003cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ce:	f107 0318 	add.w	r3, r7, #24
 80003d2:	2260      	movs	r2, #96	@ 0x60
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fd68 	bl	8002eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003dc:	463b      	mov	r3, r7
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	605a      	str	r2, [r3, #4]
 80003e4:	609a      	str	r2, [r3, #8]
 80003e6:	60da      	str	r2, [r3, #12]
 80003e8:	611a      	str	r2, [r3, #16]
 80003ea:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 fde3 	bl	8000fb8 <HAL_PWREx_ControlVoltageScaling>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003f8:	f000 f846 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003fc:	2302      	movs	r3, #2
 80003fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000404:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000406:	2310      	movs	r3, #16
 8000408:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800040a:	2300      	movs	r3, #0
 800040c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fe5c 	bl	80010d0 <HAL_RCC_OscConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800041e:	f000 f833 	bl	8000488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000422:	231f      	movs	r3, #31
 8000424:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000426:	2301      	movs	r3, #1
 8000428:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042a:	2300      	movs	r3, #0
 800042c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800042e:	2300      	movs	r3, #0
 8000430:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000432:	2300      	movs	r3, #0
 8000434:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800043a:	463b      	mov	r3, r7
 800043c:	2101      	movs	r1, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f001 fd22 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800044a:	f000 f81d 	bl	8000488 <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3778      	adds	r7, #120	@ 0x78
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
	...

08000458 <HAL_TIM_PeriodElapsedCallback>:

/* Interrupt handling function */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if( 0 == HAL_GPIO_ReadPin(BUTTON_UP_GPIO_Port, BUTTON_UP_Pin) )
 8000460:	2108      	movs	r1, #8
 8000462:	4807      	ldr	r0, [pc, #28]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000464:	f000 fd5e 	bl	8000f24 <HAL_GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d103      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x1e>
		/* Toggle LED_0 every 1 second */
		HAL_GPIO_TogglePin(LED_0_GPIO_Port, LED_0_Pin);
 800046e:	2101      	movs	r1, #1
 8000470:	4804      	ldr	r0, [pc, #16]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000472:	f000 fd87 	bl	8000f84 <HAL_GPIO_TogglePin>
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	42020000 	.word	0x42020000
 8000484:	42021c00 	.word	0x42021c00

08000488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <Error_Handler+0x8>

08000494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800049a:	4b0a      	ldr	r3, [pc, #40]	@ (80004c4 <HAL_MspInit+0x30>)
 800049c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004a0:	4a08      	ldr	r2, [pc, #32]	@ (80004c4 <HAL_MspInit+0x30>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80004aa:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_MspInit+0x30>)
 80004ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	46020c00 	.word	0x46020c00

080004c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <NMI_Handler+0x4>

080004d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <HardFault_Handler+0x4>

080004d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <MemManage_Handler+0x4>

080004e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <BusFault_Handler+0x4>

080004e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <UsageFault_Handler+0x4>

080004f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000502:	bf00      	nop
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr

0800051a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800051e:	f000 f975 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800052c:	4802      	ldr	r0, [pc, #8]	@ (8000538 <TIM6_IRQHandler+0x10>)
 800052e:	f002 f937 	bl	80027a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028

0800053c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000540:	4b18      	ldr	r3, [pc, #96]	@ (80005a4 <SystemInit+0x68>)
 8000542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000546:	4a17      	ldr	r2, [pc, #92]	@ (80005a4 <SystemInit+0x68>)
 8000548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800054c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000550:	4b15      	ldr	r3, [pc, #84]	@ (80005a8 <SystemInit+0x6c>)
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000556:	4b14      	ldr	r3, [pc, #80]	@ (80005a8 <SystemInit+0x6c>)
 8000558:	2200      	movs	r2, #0
 800055a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800055c:	4b12      	ldr	r3, [pc, #72]	@ (80005a8 <SystemInit+0x6c>)
 800055e:	2200      	movs	r2, #0
 8000560:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000562:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <SystemInit+0x6c>)
 8000564:	2200      	movs	r2, #0
 8000566:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <SystemInit+0x6c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <SystemInit+0x6c>)
 800056e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8000572:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <SystemInit+0x6c>)
 800057a:	2200      	movs	r2, #0
 800057c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800057e:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <SystemInit+0x6c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a09      	ldr	r2, [pc, #36]	@ (80005a8 <SystemInit+0x6c>)
 8000584:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000588:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800058a:	4b07      	ldr	r3, [pc, #28]	@ (80005a8 <SystemInit+0x6c>)
 800058c:	2200      	movs	r2, #0
 800058e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000590:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <SystemInit+0x68>)
 8000592:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000596:	609a      	str	r2, [r3, #8]
  #endif
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00
 80005a8:	46020c00 	.word	0x46020c00

080005ac <UOC_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void UOC_TIM6_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
	//HAL_TIM_Base_DeInit(&htim6);
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005be:	4a16      	ldr	r2, [pc, #88]	@ (8000618 <UOC_TIM6_Init+0x6c>)
 80005c0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16000-1;
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005c4:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 80005c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80005d0:	4b10      	ldr	r3, [pc, #64]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80005d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005de:	480d      	ldr	r0, [pc, #52]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005e0:	f001 ffe6 	bl	80025b0 <HAL_TIM_Base_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <UOC_TIM6_Init+0x42>
  {
    Error_Handler();
 80005ea:	f7ff ff4d 	bl	8000488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4619      	mov	r1, r3
 80005fa:	4806      	ldr	r0, [pc, #24]	@ (8000614 <UOC_TIM6_Init+0x68>)
 80005fc:	f002 fb4e 	bl	8002c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <UOC_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000606:	f7ff ff3f 	bl	8000488 <Error_Handler>
  }

}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	20000028 	.word	0x20000028
 8000618:	40001000 	.word	0x40001000

0800061c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <HAL_TIM_Base_MspInit+0x48>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d116      	bne.n	800065c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <HAL_TIM_Base_MspInit+0x4c>)
 8000630:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000634:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <HAL_TIM_Base_MspInit+0x4c>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <HAL_TIM_Base_MspInit+0x4c>)
 8000640:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000644:	f003 0310 	and.w	r3, r3, #16
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800064c:	2200      	movs	r2, #0
 800064e:	2100      	movs	r1, #0
 8000650:	2031      	movs	r0, #49	@ 0x31
 8000652:	f000 f9b3 	bl	80009bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000656:	2031      	movs	r0, #49	@ 0x31
 8000658:	f000 f9ca 	bl	80009f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40001000 	.word	0x40001000
 8000668:	46020c00 	.word	0x46020c00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006a4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff ff64 	bl	800053c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000674:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000676:	e003      	b.n	8000680 <LoopCopyDataInit>

08000678 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800067a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800067c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800067e:	3104      	adds	r1, #4

08000680 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000684:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000686:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000688:	d3f6      	bcc.n	8000678 <CopyDataInit>
	ldr	r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800068c:	e002      	b.n	8000694 <LoopFillZerobss>

0800068e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800068e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000690:	f842 3b04 	str.w	r3, [r2], #4

08000694 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <LoopForever+0x16>)
	cmp	r2, r3
 8000696:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000698:	d3f9      	bcc.n	800068e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 fc0f 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fe6d 	bl	800037c <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80006a4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80006a8:	08002ff4 	.word	0x08002ff4
	ldr	r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006b0:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006b8:	20000078 	.word	0x20000078

080006bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_Init+0x50>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a11      	ldr	r2, [pc, #68]	@ (8000710 <HAL_Init+0x50>)
 80006ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f968 	bl	80009a6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80006d6:	f001 fdc9 	bl	800226c <HAL_RCC_GetSysClockFreq>
 80006da:	4602      	mov	r2, r0
 80006dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <HAL_Init+0x54>)
 80006de:	6a1b      	ldr	r3, [r3, #32]
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	490c      	ldr	r1, [pc, #48]	@ (8000718 <HAL_Init+0x58>)
 80006e6:	5ccb      	ldrb	r3, [r1, r3]
 80006e8:	fa22 f303 	lsr.w	r3, r2, r3
 80006ec:	4a0b      	ldr	r2, [pc, #44]	@ (800071c <HAL_Init+0x5c>)
 80006ee:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006f0:	2004      	movs	r0, #4
 80006f2:	f000 f9ad 	bl	8000a50 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006f6:	200f      	movs	r0, #15
 80006f8:	f000 f812 	bl	8000720 <HAL_InitTick>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e002      	b.n	800070c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000706:	f7ff fec5 	bl	8000494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
}
 800070c:	4618      	mov	r0, r3
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40022000 	.word	0x40022000
 8000714:	46020c00 	.word	0x46020c00
 8000718:	08002f1c 	.word	0x08002f1c
 800071c:	20000000 	.word	0x20000000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800072c:	4b33      	ldr	r3, [pc, #204]	@ (80007fc <HAL_InitTick+0xdc>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d101      	bne.n	8000738 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e05c      	b.n	80007f2 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8000738:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <HAL_InitTick+0xe0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 0304 	and.w	r3, r3, #4
 8000740:	2b04      	cmp	r3, #4
 8000742:	d10c      	bne.n	800075e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8000744:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <HAL_InitTick+0xe4>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <HAL_InitTick+0xdc>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000752:	fbb3 f3f1 	udiv	r3, r3, r1
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e037      	b.n	80007ce <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800075e:	f000 f9cf 	bl	8000b00 <HAL_SYSTICK_GetCLKSourceConfig>
 8000762:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d023      	beq.n	80007b2 <HAL_InitTick+0x92>
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d82d      	bhi.n	80007cc <HAL_InitTick+0xac>
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <HAL_InitTick+0x5e>
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d00d      	beq.n	8000798 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800077c:	e026      	b.n	80007cc <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800077e:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <HAL_InitTick+0xe4>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <HAL_InitTick+0xdc>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4619      	mov	r1, r3
 8000788:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800078c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000790:	fbb2 f3f3 	udiv	r3, r2, r3
 8000794:	60fb      	str	r3, [r7, #12]
        break;
 8000796:	e01a      	b.n	80007ce <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <HAL_InitTick+0xdc>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80007a6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	60fb      	str	r3, [r7, #12]
        break;
 80007b0:	e00d      	b.n	80007ce <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_InitTick+0xdc>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	461a      	mov	r2, r3
 80007b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80007c0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c8:	60fb      	str	r3, [r7, #12]
        break;
 80007ca:	e000      	b.n	80007ce <HAL_InitTick+0xae>
        break;
 80007cc:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80007ce:	68f8      	ldr	r0, [r7, #12]
 80007d0:	f000 f91c 	bl	8000a0c <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e009      	b.n	80007f2 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007de:	2200      	movs	r2, #0
 80007e0:	6879      	ldr	r1, [r7, #4]
 80007e2:	f04f 30ff 	mov.w	r0, #4294967295
 80007e6:	f000 f8e9 	bl	80009bc <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80007ea:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_InitTick+0xe8>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	e000e010 	.word	0xe000e010
 8000804:	20000000 	.word	0x20000000
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	20000074 	.word	0x20000074

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	@ (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000074 	.word	0x20000074

0800084c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800085c:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000868:	4013      	ands	r3, r2
 800086a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800087c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800087e:	4a04      	ldr	r2, [pc, #16]	@ (8000890 <__NVIC_SetPriorityGrouping+0x44>)
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	60d3      	str	r3, [r2, #12]
}
 8000884:	bf00      	nop
 8000886:	3714      	adds	r7, #20
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <__NVIC_GetPriorityGrouping+0x18>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0a1b      	lsrs	r3, r3, #8
 800089e:	f003 0307 	and.w	r3, r3, #7
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	db0b      	blt.n	80008da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f003 021f 	and.w	r2, r3, #31
 80008c8:	4907      	ldr	r1, [pc, #28]	@ (80008e8 <__NVIC_EnableIRQ+0x38>)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	095b      	lsrs	r3, r3, #5
 80008d0:	2001      	movs	r0, #1
 80008d2:	fa00 f202 	lsl.w	r2, r0, r2
 80008d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	@ (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	@ (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	@ 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
         );
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	@ 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ff4c 	bl	800084c <__NVIC_SetPriorityGrouping>
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
 80009c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009ca:	f7ff ff63 	bl	8000894 <__NVIC_GetPriorityGrouping>
 80009ce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	68b9      	ldr	r1, [r7, #8]
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f7ff ffb3 	bl	8000940 <NVIC_EncodePriority>
 80009da:	4602      	mov	r2, r0
 80009dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f7ff ff82 	bl	80008ec <__NVIC_SetPriority>
}
 80009e8:	bf00      	nop
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff56 	bl	80008b0 <__NVIC_EnableIRQ>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a1c:	d301      	bcc.n	8000a22 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00d      	b.n	8000a3e <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_SYSTICK_Config+0x40>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <HAL_SYSTICK_Config+0x40>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_SYSTICK_Config+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <HAL_SYSTICK_Config+0x40>)
 8000a36:	f043 0303 	orr.w	r3, r3, #3
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d844      	bhi.n	8000ae8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8000a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a64 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000a87 	.word	0x08000a87
 8000a68:	08000aa5 	.word	0x08000aa5
 8000a6c:	08000ac7 	.word	0x08000ac7
 8000a70:	08000ae9 	.word	0x08000ae9
 8000a74:	08000a79 	.word	0x08000a79
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6013      	str	r3, [r2, #0]
      break;
 8000a84:	e031      	b.n	8000aea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000a8c:	f023 0304 	bic.w	r3, r3, #4
 8000a90:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8000a92:	4b1a      	ldr	r3, [pc, #104]	@ (8000afc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a18      	ldr	r2, [pc, #96]	@ (8000afc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000a9a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000aa2:	e022      	b.n	8000aea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a13      	ldr	r2, [pc, #76]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000aaa:	f023 0304 	bic.w	r3, r3, #4
 8000aae:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000abc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ac4:	e011      	b.n	8000aea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a0b      	ldr	r2, [pc, #44]	@ (8000af8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8000acc:	f023 0304 	bic.w	r3, r3, #4
 8000ad0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000adc:	4a07      	ldr	r2, [pc, #28]	@ (8000afc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8000ade:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8000ae6:	e000      	b.n	8000aea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8000ae8:	bf00      	nop
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010
 8000afc:	46020c00 	.word	0x46020c00

08000b00 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8000b12:	2304      	movs	r3, #4
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	e021      	b.n	8000b5c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8000b22:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000b2a:	d011      	beq.n	8000b50 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8000b32:	d810      	bhi.n	8000b56 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d004      	beq.n	8000b44 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b40:	d003      	beq.n	8000b4a <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8000b42:	e008      	b.n	8000b56 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
        break;
 8000b48:	e008      	b.n	8000b5c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
        break;
 8000b4e:	e005      	b.n	8000b5c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8000b50:	2302      	movs	r3, #2
 8000b52:	607b      	str	r3, [r7, #4]
        break;
 8000b54:	e002      	b.n	8000b5c <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
        break;
 8000b5a:	bf00      	nop
    }
  }
  return systick_source;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010
 8000b70:	46020c00 	.word	0x46020c00

08000b74 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
 8000b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b86:	e1ba      	b.n	8000efe <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	fa01 f303 	lsl.w	r3, r1, r3
 8000b94:	4013      	ands	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 81aa 	beq.w	8000ef8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a55      	ldr	r2, [pc, #340]	@ (8000cfc <HAL_GPIO_Init+0x188>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d15d      	bne.n	8000c68 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	69fa      	ldr	r2, [r7, #28]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0201 	and.w	r2, r3, #1
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69fa      	ldr	r2, [r7, #28]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69fa      	ldr	r2, [r7, #28]
 8000bda:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000bdc:	4a48      	ldr	r2, [pc, #288]	@ (8000d00 <HAL_GPIO_Init+0x18c>)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000be4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000be6:	4a46      	ldr	r2, [pc, #280]	@ (8000d00 <HAL_GPIO_Init+0x18c>)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	4413      	add	r3, r2
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	08da      	lsrs	r2, r3, #3
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	3208      	adds	r2, #8
 8000bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bfe:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	220f      	movs	r2, #15
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69fa      	ldr	r2, [r7, #28]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	f003 0307 	and.w	r3, r3, #7
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	220b      	movs	r2, #11
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69fa      	ldr	r2, [r7, #28]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	08da      	lsrs	r2, r3, #3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	3208      	adds	r2, #8
 8000c32:	69f9      	ldr	r1, [r7, #28]
 8000c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	2203      	movs	r2, #3
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2202      	movs	r2, #2
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	69fa      	ldr	r2, [r7, #28]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	e067      	b.n	8000d38 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x104>
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b12      	cmp	r3, #18
 8000c76:	d145      	bne.n	8000d04 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c84:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	f003 020f 	and.w	r2, r3, #15
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	69f9      	ldr	r1, [r7, #28]
 8000cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	69fa      	ldr	r2, [r7, #28]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0203 	and.w	r2, r3, #3
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	69fa      	ldr	r2, [r7, #28]
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	e01e      	b.n	8000d38 <HAL_GPIO_Init+0x1c4>
 8000cfa:	bf00      	nop
 8000cfc:	46020000 	.word	0x46020000
 8000d00:	08002f6c 	.word	0x08002f6c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	2203      	movs	r2, #3
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0203 	and.w	r2, r3, #3
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d00b      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	2b11      	cmp	r3, #17
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b12      	cmp	r3, #18
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	69fa      	ldr	r2, [r7, #28]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0201 	and.w	r2, r3, #1
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	69fa      	ldr	r2, [r7, #28]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d017      	beq.n	8000df2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d07c      	beq.n	8000ef8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000dfe:	4a47      	ldr	r2, [pc, #284]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	3318      	adds	r3, #24
 8000e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	220f      	movs	r2, #15
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0a9a      	lsrs	r2, r3, #10
 8000e26:	4b3e      	ldr	r3, [pc, #248]	@ (8000f20 <HAL_GPIO_Init+0x3ac>)
 8000e28:	4013      	ands	r3, r2
 8000e2a:	697a      	ldr	r2, [r7, #20]
 8000e2c:	f002 0203 	and.w	r2, r2, #3
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	4093      	lsls	r3, r2
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000e3a:	4938      	ldr	r1, [pc, #224]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3318      	adds	r3, #24
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000e48:	4b34      	ldr	r3, [pc, #208]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000e64:	69fa      	ldr	r2, [r7, #28]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000e72:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000e96:	4a21      	ldr	r2, [pc, #132]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000ea2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000ed0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000ee8:	69fa      	ldr	r2, [r7, #28]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_GPIO_Init+0x3a8>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3301      	adds	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa22 f303 	lsr.w	r3, r2, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f47f ae3d 	bne.w	8000b88 <HAL_GPIO_Init+0x14>
  }
}
 8000f0e:	bf00      	nop
 8000f10:	bf00      	nop
 8000f12:	3724      	adds	r7, #36	@ 0x24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	46022000 	.word	0x46022000
 8000f20:	002f7f7f 	.word	0x002f7f7f

08000f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	807b      	strh	r3, [r7, #2]
 8000f60:	4613      	mov	r3, r2
 8000f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f64:	787b      	ldrb	r3, [r7, #1]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	695b      	ldr	r3, [r3, #20]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	041a      	lsls	r2, r3, #16
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43d9      	mvns	r1, r3
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	400b      	ands	r3, r1
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	619a      	str	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000fc0:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d10b      	bne.n	8000fea <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fd8:	d905      	bls.n	8000fe6 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000fda:	4b33      	ldr	r3, [pc, #204]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000fdc:	68db      	ldr	r3, [r3, #12]
 8000fde:	4a32      	ldr	r2, [pc, #200]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000fe0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe4:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e057      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ff0:	d90a      	bls.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001004:	60d3      	str	r3, [r2, #12]
 8001006:	e007      	b.n	8001018 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8001008:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8001010:	4925      	ldr	r1, [pc, #148]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4313      	orrs	r3, r2
 8001016:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001018:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a24      	ldr	r2, [pc, #144]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800101e:	fba2 2303 	umull	r2, r3, r2, r3
 8001022:	099b      	lsrs	r3, r3, #6
 8001024:	2232      	movs	r2, #50	@ 0x32
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	4a21      	ldr	r2, [pc, #132]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800102c:	fba2 2303 	umull	r2, r3, r2, r3
 8001030:	099b      	lsrs	r3, r3, #6
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001036:	e002      	b.n	800103e <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3b01      	subs	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <HAL_PWREx_ControlVoltageScaling+0x98>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d1f3      	bne.n	8001038 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d01b      	beq.n	800108e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a15      	ldr	r2, [pc, #84]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	2232      	movs	r2, #50	@ 0x32
 8001064:	fb02 f303 	mul.w	r3, r2, r3
 8001068:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	099b      	lsrs	r3, r3, #6
 8001070:	3301      	adds	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001074:	e002      	b.n	800107c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3b01      	subs	r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800107e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f3      	bne.n	8001076 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8001094:	2303      	movs	r3, #3
 8001096:	e000      	b.n	800109a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	46020800 	.word	0x46020800
 80010ac:	20000000 	.word	0x20000000
 80010b0:	10624dd3 	.word	0x10624dd3

080010b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	46020800 	.word	0x46020800

080010d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08e      	sub	sp, #56	@ 0x38
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	f000 bec8 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ea:	4b99      	ldr	r3, [pc, #612]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f4:	4b96      	ldr	r3, [pc, #600]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80010f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0310 	and.w	r3, r3, #16
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 816c 	beq.w	80013e4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800110c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_RCC_OscConfig+0x52>
 8001112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001114:	2b0c      	cmp	r3, #12
 8001116:	f040 80de 	bne.w	80012d6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800111a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111c:	2b01      	cmp	r3, #1
 800111e:	f040 80da 	bne.w	80012d6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	f000 bea5 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001134:	4b86      	ldr	r3, [pc, #536]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d004      	beq.n	800114a <HAL_RCC_OscConfig+0x7a>
 8001140:	4b83      	ldr	r3, [pc, #524]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001148:	e005      	b.n	8001156 <HAL_RCC_OscConfig+0x86>
 800114a:	4b81      	ldr	r3, [pc, #516]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800114c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001156:	4293      	cmp	r3, r2
 8001158:	d255      	bcs.n	8001206 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800115a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10a      	bne.n	8001176 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001164:	4618      	mov	r0, r3
 8001166:	f001 f99d 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	f000 be82 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001176:	4b76      	ldr	r3, [pc, #472]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4a75      	ldr	r2, [pc, #468]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800117c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001180:	6093      	str	r3, [r2, #8]
 8001182:	4b73      	ldr	r3, [pc, #460]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118e:	4970      	ldr	r1, [pc, #448]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001190:	4313      	orrs	r3, r2
 8001192:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001198:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800119c:	d309      	bcc.n	80011b2 <HAL_RCC_OscConfig+0xe2>
 800119e:	4b6c      	ldr	r3, [pc, #432]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	f023 021f 	bic.w	r2, r3, #31
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	4969      	ldr	r1, [pc, #420]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
 80011b0:	e07e      	b.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da0a      	bge.n	80011d0 <HAL_RCC_OscConfig+0x100>
 80011ba:	4b65      	ldr	r3, [pc, #404]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	015b      	lsls	r3, r3, #5
 80011c8:	4961      	ldr	r1, [pc, #388]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60cb      	str	r3, [r1, #12]
 80011ce:	e06f      	b.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011d8:	d30a      	bcc.n	80011f0 <HAL_RCC_OscConfig+0x120>
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4959      	ldr	r1, [pc, #356]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60cb      	str	r3, [r1, #12]
 80011ee:	e05f      	b.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
 80011f0:	4b57      	ldr	r3, [pc, #348]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	03db      	lsls	r3, r3, #15
 80011fe:	4954      	ldr	r1, [pc, #336]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001200:	4313      	orrs	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
 8001204:	e054      	b.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001206:	4b52      	ldr	r3, [pc, #328]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	4a51      	ldr	r2, [pc, #324]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800120c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001210:	6093      	str	r3, [r2, #8]
 8001212:	4b4f      	ldr	r3, [pc, #316]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	494c      	ldr	r1, [pc, #304]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001220:	4313      	orrs	r3, r2
 8001222:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001228:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800122c:	d309      	bcc.n	8001242 <HAL_RCC_OscConfig+0x172>
 800122e:	4b48      	ldr	r3, [pc, #288]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f023 021f 	bic.w	r2, r3, #31
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6a1b      	ldr	r3, [r3, #32]
 800123a:	4945      	ldr	r1, [pc, #276]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800123c:	4313      	orrs	r3, r2
 800123e:	60cb      	str	r3, [r1, #12]
 8001240:	e028      	b.n	8001294 <HAL_RCC_OscConfig+0x1c4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001246:	2b00      	cmp	r3, #0
 8001248:	da0a      	bge.n	8001260 <HAL_RCC_OscConfig+0x190>
 800124a:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	493d      	ldr	r1, [pc, #244]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800125a:	4313      	orrs	r3, r2
 800125c:	60cb      	str	r3, [r1, #12]
 800125e:	e019      	b.n	8001294 <HAL_RCC_OscConfig+0x1c4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001268:	d30a      	bcc.n	8001280 <HAL_RCC_OscConfig+0x1b0>
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	4935      	ldr	r1, [pc, #212]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60cb      	str	r3, [r1, #12]
 800127e:	e009      	b.n	8001294 <HAL_RCC_OscConfig+0x1c4>
 8001280:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	03db      	lsls	r3, r3, #15
 800128e:	4930      	ldr	r1, [pc, #192]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10a      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 f900 	bl	80024a4 <RCC_SetFlashLatencyFromMSIRange>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 bde5 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80012b0:	f001 f8de 	bl	8002470 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <HAL_RCC_OscConfig+0x284>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fa31 	bl	8000720 <HAL_InitTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80012c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 808a 	beq.w	80013e2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80012ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012d2:	f000 bdd2 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d066      	beq.n	80013ac <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80012ea:	f7ff faa3 	bl	8000834 <HAL_GetTick>
 80012ee:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80012f0:	e009      	b.n	8001306 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f2:	f7ff fa9f 	bl	8000834 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d902      	bls.n	8001306 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	f000 bdba 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001306:	4b12      	ldr	r3, [pc, #72]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0ef      	beq.n	80012f2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001312:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	4a0e      	ldr	r2, [pc, #56]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001318:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800131c:	6093      	str	r3, [r2, #8]
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	4909      	ldr	r1, [pc, #36]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001334:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001338:	d30e      	bcc.n	8001358 <HAL_RCC_OscConfig+0x288>
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f023 021f 	bic.w	r2, r3, #31
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4902      	ldr	r1, [pc, #8]	@ (8001350 <HAL_RCC_OscConfig+0x280>)
 8001348:	4313      	orrs	r3, r2
 800134a:	60cb      	str	r3, [r1, #12]
 800134c:	e04a      	b.n	80013e4 <HAL_RCC_OscConfig+0x314>
 800134e:	bf00      	nop
 8001350:	46020c00 	.word	0x46020c00
 8001354:	20000004 	.word	0x20000004
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135c:	2b00      	cmp	r3, #0
 800135e:	da0a      	bge.n	8001376 <HAL_RCC_OscConfig+0x2a6>
 8001360:	4b98      	ldr	r3, [pc, #608]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	015b      	lsls	r3, r3, #5
 800136e:	4995      	ldr	r1, [pc, #596]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	60cb      	str	r3, [r1, #12]
 8001374:	e036      	b.n	80013e4 <HAL_RCC_OscConfig+0x314>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800137a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800137e:	d30a      	bcc.n	8001396 <HAL_RCC_OscConfig+0x2c6>
 8001380:	4b90      	ldr	r3, [pc, #576]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	029b      	lsls	r3, r3, #10
 800138e:	498d      	ldr	r1, [pc, #564]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	4313      	orrs	r3, r2
 8001392:	60cb      	str	r3, [r1, #12]
 8001394:	e026      	b.n	80013e4 <HAL_RCC_OscConfig+0x314>
 8001396:	4b8b      	ldr	r3, [pc, #556]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	03db      	lsls	r3, r3, #15
 80013a4:	4987      	ldr	r1, [pc, #540]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	60cb      	str	r3, [r1, #12]
 80013aa:	e01b      	b.n	80013e4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80013ac:	4b85      	ldr	r3, [pc, #532]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a84      	ldr	r2, [pc, #528]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80013b8:	f7ff fa3c 	bl	8000834 <HAL_GetTick>
 80013bc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80013be:	e009      	b.n	80013d4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c0:	f7ff fa38 	bl	8000834 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d902      	bls.n	80013d4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	f000 bd53 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80013d4:	4b7b      	ldr	r3, [pc, #492]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ef      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2f0>
 80013e0:	e000      	b.n	80013e4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80013e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 808b 	beq.w	8001508 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80013f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d005      	beq.n	8001404 <HAL_RCC_OscConfig+0x334>
 80013f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013fa:	2b0c      	cmp	r3, #12
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	2b03      	cmp	r3, #3
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d17d      	bne.n	8001508 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	f000 bd34 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800141a:	d106      	bne.n	800142a <HAL_RCC_OscConfig+0x35a>
 800141c:	4b69      	ldr	r3, [pc, #420]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a68      	ldr	r2, [pc, #416]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001426:	6013      	str	r3, [r2, #0]
 8001428:	e041      	b.n	80014ae <HAL_RCC_OscConfig+0x3de>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x38a>
 8001434:	4b63      	ldr	r3, [pc, #396]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a62      	ldr	r2, [pc, #392]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b60      	ldr	r3, [pc, #384]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5f      	ldr	r2, [pc, #380]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b5d      	ldr	r3, [pc, #372]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a5c      	ldr	r2, [pc, #368]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e029      	b.n	80014ae <HAL_RCC_OscConfig+0x3de>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8001462:	d112      	bne.n	800148a <HAL_RCC_OscConfig+0x3ba>
 8001464:	4b57      	ldr	r3, [pc, #348]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a56      	ldr	r2, [pc, #344]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b54      	ldr	r3, [pc, #336]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a53      	ldr	r2, [pc, #332]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800147a:	6013      	str	r3, [r2, #0]
 800147c:	4b51      	ldr	r3, [pc, #324]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a50      	ldr	r2, [pc, #320]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001482:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	e011      	b.n	80014ae <HAL_RCC_OscConfig+0x3de>
 800148a:	4b4e      	ldr	r3, [pc, #312]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a4d      	ldr	r2, [pc, #308]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b4b      	ldr	r3, [pc, #300]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a4a      	ldr	r2, [pc, #296]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800149c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b48      	ldr	r3, [pc, #288]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a47      	ldr	r2, [pc, #284]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80014ac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d014      	beq.n	80014e0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80014b6:	f7ff f9bd 	bl	8000834 <HAL_GetTick>
 80014ba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014bc:	e009      	b.n	80014d2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014be:	f7ff f9b9 	bl	8000834 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	@ 0x64
 80014ca:	d902      	bls.n	80014d2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f000 bcd4 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014d2:	4b3c      	ldr	r3, [pc, #240]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0ef      	beq.n	80014be <HAL_RCC_OscConfig+0x3ee>
 80014de:	e013      	b.n	8001508 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80014e0:	f7ff f9a8 	bl	8000834 <HAL_GetTick>
 80014e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014e6:	e009      	b.n	80014fc <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff f9a4 	bl	8000834 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d902      	bls.n	80014fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f000 bcbf 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014fc:	4b31      	ldr	r3, [pc, #196]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ef      	bne.n	80014e8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d05f      	beq.n	80015d4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001516:	2b04      	cmp	r3, #4
 8001518:	d005      	beq.n	8001526 <HAL_RCC_OscConfig+0x456>
 800151a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d114      	bne.n	800154a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001522:	2b02      	cmp	r3, #2
 8001524:	d111      	bne.n	800154a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d102      	bne.n	8001534 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	f000 bca3 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	4920      	ldr	r1, [pc, #128]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	4313      	orrs	r3, r2
 8001546:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001548:	e044      	b.n	80015d4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d024      	beq.n	800159c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a1b      	ldr	r2, [pc, #108]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800155c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800155e:	f7ff f969 	bl	8000834 <HAL_GetTick>
 8001562:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001564:	e009      	b.n	800157a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff f965 	bl	8000834 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d902      	bls.n	800157a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	f000 bc80 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157a:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0ef      	beq.n	8001566 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	490b      	ldr	r1, [pc, #44]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 8001596:	4313      	orrs	r3, r2
 8001598:	610b      	str	r3, [r1, #16]
 800159a:	e01b      	b.n	80015d4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a08      	ldr	r2, [pc, #32]	@ (80015c4 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80015a8:	f7ff f944 	bl	8000834 <HAL_GetTick>
 80015ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b0:	f7ff f940 	bl	8000834 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d904      	bls.n	80015c8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	f000 bc5b 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
 80015c4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c8:	4baf      	ldr	r3, [pc, #700]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ed      	bne.n	80015b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80c8 	beq.w	8001772 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e8:	4ba7      	ldr	r3, [pc, #668]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d111      	bne.n	800161a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	4ba4      	ldr	r3, [pc, #656]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80015f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fc:	4aa2      	ldr	r2, [pc, #648]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001606:	4ba0      	ldr	r3, [pc, #640]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800161a:	4b9c      	ldr	r3, [pc, #624]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d119      	bne.n	800165a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001626:	4b99      	ldr	r3, [pc, #612]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 8001628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162a:	4a98      	ldr	r2, [pc, #608]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff f8ff 	bl	8000834 <HAL_GetTick>
 8001636:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001638:	e009      	b.n	800164e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff f8fb 	bl	8000834 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d902      	bls.n	800164e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	f000 bc16 	b.w	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800164e:	4b8f      	ldr	r3, [pc, #572]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 8001650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ef      	beq.n	800163a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d05f      	beq.n	8001722 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001662:	4b89      	ldr	r3, [pc, #548]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001664:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001668:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699a      	ldr	r2, [r3, #24]
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001674:	429a      	cmp	r2, r3
 8001676:	d037      	beq.n	80016e8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e3f4      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d01b      	beq.n	80016d2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800169a:	4b7b      	ldr	r3, [pc, #492]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800169c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a0:	4a79      	ldr	r2, [pc, #484]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80016a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80016a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80016aa:	f7ff f8c3 	bl	8000834 <HAL_GetTick>
 80016ae:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b2:	f7ff f8bf 	bl	8000834 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e3da      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016c4:	4b70      	ldr	r3, [pc, #448]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80016c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1ef      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80016d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80016d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4969      	ldr	r1, [pc, #420]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80016e8:	4b67      	ldr	r3, [pc, #412]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80016ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016ee:	4a66      	ldr	r2, [pc, #408]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80016f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80016f8:	f7ff f89c 	bl	8000834 <HAL_GetTick>
 80016fc:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff f898 	bl	8000834 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b05      	cmp	r3, #5
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e3b3      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001712:	4b5d      	ldr	r3, [pc, #372]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001718:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <HAL_RCC_OscConfig+0x630>
 8001720:	e01b      	b.n	800175a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001722:	4b59      	ldr	r3, [pc, #356]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001728:	4a57      	ldr	r2, [pc, #348]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800172a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800172e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8001732:	f7ff f87f 	bl	8000834 <HAL_GetTick>
 8001736:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff f87b 	bl	8000834 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e396      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800174c:	4b4e      	ldr	r3, [pc, #312]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800174e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1ef      	bne.n	800173a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800175a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001762:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001768:	4a47      	ldr	r2, [pc, #284]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800176a:	f023 0304 	bic.w	r3, r3, #4
 800176e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8111 	beq.w	80019a2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001786:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001788:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b3c      	ldr	r3, [pc, #240]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800179a:	4a3b      	ldr	r2, [pc, #236]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80017a4:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 80017a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d118      	bne.n	80017f6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80017c4:	4b31      	ldr	r3, [pc, #196]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 80017c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c8:	4a30      	ldr	r2, [pc, #192]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d0:	f7ff f830 	bl	8000834 <HAL_GetTick>
 80017d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d8:	f7ff f82c 	bl	8000834 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e347      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80017ea:	4b28      	ldr	r3, [pc, #160]	@ (800188c <HAL_RCC_OscConfig+0x7bc>)
 80017ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01f      	beq.n	8001842 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	2b00      	cmp	r3, #0
 800180c:	d010      	beq.n	8001830 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800180e:	4b1e      	ldr	r3, [pc, #120]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001810:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001814:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001824:	4a18      	ldr	r2, [pc, #96]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800182e:	e018      	b.n	8001862 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001830:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001832:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001836:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001840:	e00f      	b.n	8001862 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001844:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001848:	4a0f      	ldr	r2, [pc, #60]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 8001854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001858:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_RCC_OscConfig+0x7b8>)
 800185a:	f023 0304 	bic.w	r3, r3, #4
 800185e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d057      	beq.n	800191a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800186a:	f7fe ffe3 	bl	8000834 <HAL_GetTick>
 800186e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001870:	e00e      	b.n	8001890 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001872:	f7fe ffdf 	bl	8000834 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d905      	bls.n	8001890 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e2f8      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
 8001888:	46020c00 	.word	0x46020c00
 800188c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001890:	4b9c      	ldr	r3, [pc, #624]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0e9      	beq.n	8001872 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01b      	beq.n	80018e2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018aa:	4b96      	ldr	r3, [pc, #600]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80018ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018b0:	4a94      	ldr	r2, [pc, #592]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80018b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018ba:	e00a      	b.n	80018d2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018bc:	f7fe ffba 	bl	8000834 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e2d3      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80018d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80018d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ed      	beq.n	80018bc <HAL_RCC_OscConfig+0x7ec>
 80018e0:	e053      	b.n	800198a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018e2:	4b88      	ldr	r3, [pc, #544]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80018e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80018e8:	4a86      	ldr	r2, [pc, #536]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80018ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7fe ff9e 	bl	8000834 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e2b7      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800190a:	4b7e      	ldr	r3, [pc, #504]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 800190c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001910:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1ed      	bne.n	80018f4 <HAL_RCC_OscConfig+0x824>
 8001918:	e037      	b.n	800198a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800191a:	f7fe ff8b 	bl	8000834 <HAL_GetTick>
 800191e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7fe ff87 	bl	8000834 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e2a0      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001938:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 800193a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1ed      	bne.n	8001922 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001946:	4b6f      	ldr	r3, [pc, #444]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800194c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001950:	2b00      	cmp	r3, #0
 8001952:	d01a      	beq.n	800198a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800195a:	4a6a      	ldr	r2, [pc, #424]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 800195c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001960:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7fe ff65 	bl	8000834 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e27e      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800197c:	4b61      	ldr	r3, [pc, #388]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 800197e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1ed      	bne.n	8001966 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800198a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001992:	4b5c      	ldr	r3, [pc, #368]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001998:	4a5a      	ldr	r2, [pc, #360]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0320 	and.w	r3, r3, #32
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d036      	beq.n	8001a1c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d019      	beq.n	80019ea <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80019b6:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a52      	ldr	r2, [pc, #328]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80019bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80019c2:	f7fe ff37 	bl	8000834 <HAL_GetTick>
 80019c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ca:	f7fe ff33 	bl	8000834 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e24e      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80019dc:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x8fa>
 80019e8:	e018      	b.n	8001a1c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a45      	ldr	r2, [pc, #276]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 80019f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019f4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80019f6:	f7fe ff1d 	bl	8000834 <HAL_GetTick>
 80019fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80019fc:	e008      	b.n	8001a10 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fe:	f7fe ff19 	bl	8000834 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e234      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001a10:	4b3c      	ldr	r3, [pc, #240]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f0      	bne.n	80019fe <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d036      	beq.n	8001a96 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d019      	beq.n	8001a64 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001a30:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a33      	ldr	r2, [pc, #204]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001a3c:	f7fe fefa 	bl	8000834 <HAL_GetTick>
 8001a40:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001a44:	f7fe fef6 	bl	8000834 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e211      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001a56:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x974>
 8001a62:	e018      	b.n	8001a96 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001a64:	4b27      	ldr	r3, [pc, #156]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a26      	ldr	r2, [pc, #152]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001a70:	f7fe fee0 	bl	8000834 <HAL_GetTick>
 8001a74:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001a78:	f7fe fedc 	bl	8000834 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1f7      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d07f      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d062      	beq.n	8001b70 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4a15      	ldr	r2, [pc, #84]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001ab0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ab4:	6093      	str	r3, [r2, #8]
 8001ab6:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac2:	4910      	ldr	r1, [pc, #64]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ad0:	d309      	bcc.n	8001ae6 <HAL_RCC_OscConfig+0xa16>
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f023 021f 	bic.w	r2, r3, #31
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4909      	ldr	r1, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
 8001ae4:	e02a      	b.n	8001b3c <HAL_RCC_OscConfig+0xa6c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da0c      	bge.n	8001b08 <HAL_RCC_OscConfig+0xa38>
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	015b      	lsls	r3, r3, #5
 8001afc:	4901      	ldr	r1, [pc, #4]	@ (8001b04 <HAL_RCC_OscConfig+0xa34>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60cb      	str	r3, [r1, #12]
 8001b02:	e01b      	b.n	8001b3c <HAL_RCC_OscConfig+0xa6c>
 8001b04:	46020c00 	.word	0x46020c00
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b10:	d30a      	bcc.n	8001b28 <HAL_RCC_OscConfig+0xa58>
 8001b12:	4ba1      	ldr	r3, [pc, #644]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	029b      	lsls	r3, r3, #10
 8001b20:	499d      	ldr	r1, [pc, #628]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
 8001b26:	e009      	b.n	8001b3c <HAL_RCC_OscConfig+0xa6c>
 8001b28:	4b9b      	ldr	r3, [pc, #620]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	03db      	lsls	r3, r3, #15
 8001b36:	4998      	ldr	r1, [pc, #608]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001b3c:	4b96      	ldr	r3, [pc, #600]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a95      	ldr	r2, [pc, #596]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b48:	f7fe fe74 	bl	8000834 <HAL_GetTick>
 8001b4c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001b50:	f7fe fe70 	bl	8000834 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e18b      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001b62:	4b8d      	ldr	r3, [pc, #564]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCC_OscConfig+0xa80>
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001b70:	4b89      	ldr	r3, [pc, #548]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a88      	ldr	r2, [pc, #544]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b76:	f023 0310 	bic.w	r3, r3, #16
 8001b7a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b7c:	f7fe fe5a 	bl	8000834 <HAL_GetTick>
 8001b80:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001b84:	f7fe fe56 	bl	8000834 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e171      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001b96:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8166 	beq.w	8001e78 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb2:	4b79      	ldr	r3, [pc, #484]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b0c      	cmp	r3, #12
 8001bbc:	f000 80f2 	beq.w	8001da4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	f040 80c5 	bne.w	8001d54 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001bca:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a72      	ldr	r2, [pc, #456]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001bd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bd4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001bd6:	f7fe fe2d 	bl	8000834 <HAL_GetTick>
 8001bda:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7fe fe29 	bl	8000834 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e144      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001bf0:	4b69      	ldr	r3, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bfc:	4b66      	ldr	r3, [pc, #408]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d111      	bne.n	8001c2e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	4b63      	ldr	r3, [pc, #396]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c10:	4a61      	ldr	r2, [pc, #388]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d9c <HAL_RCC_OscConfig+0xccc>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c3a:	d102      	bne.n	8001c42 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001c42:	4b56      	ldr	r3, [pc, #344]	@ (8001d9c <HAL_RCC_OscConfig+0xccc>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4a55      	ldr	r2, [pc, #340]	@ (8001d9c <HAL_RCC_OscConfig+0xccc>)
 8001c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001c4e:	4b52      	ldr	r3, [pc, #328]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001c56:	f023 0303 	bic.w	r3, r3, #3
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001c62:	3a01      	subs	r2, #1
 8001c64:	0212      	lsls	r2, r2, #8
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	494a      	ldr	r1, [pc, #296]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c74:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001c76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c78:	4b49      	ldr	r3, [pc, #292]	@ (8001da0 <HAL_RCC_OscConfig+0xcd0>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c80:	3a01      	subs	r2, #1
 8001c82:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001c8a:	3a01      	subs	r2, #1
 8001c8c:	0252      	lsls	r2, r2, #9
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c96:	3a01      	subs	r2, #1
 8001c98:	0412      	lsls	r2, r2, #16
 8001c9a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8001c9e:	4311      	orrs	r1, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	0612      	lsls	r2, r2, #24
 8001ca8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8001cac:	430a      	orrs	r2, r1
 8001cae:	493a      	ldr	r1, [pc, #232]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001cb4:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	4a37      	ldr	r2, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001cba:	f023 0310 	bic.w	r3, r3, #16
 8001cbe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	4a34      	ldr	r2, [pc, #208]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001cca:	4b33      	ldr	r3, [pc, #204]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	4a32      	ldr	r2, [pc, #200]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001cd0:	f043 0310 	orr.w	r3, r3, #16
 8001cd4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001cd6:	4b30      	ldr	r3, [pc, #192]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cda:	f023 020c 	bic.w	r2, r3, #12
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	492d      	ldr	r1, [pc, #180]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8001ce8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <HAL_RCC_OscConfig+0xccc>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a29      	ldr	r2, [pc, #164]	@ (8001d9c <HAL_RCC_OscConfig+0xccc>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cfa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001cfc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0a:	4a23      	ldr	r2, [pc, #140]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1f      	ldr	r2, [pc, #124]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d1e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d20:	f7fe fd88 	bl	8000834 <HAL_GetTick>
 8001d24:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe fd84 	bl	8000834 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e09f      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4a:	4a13      	ldr	r2, [pc, #76]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d50:	6293      	str	r3, [r2, #40]	@ 0x28
 8001d52:	e091      	b.n	8001e78 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001d60:	f7fe fd68 	bl	8000834 <HAL_GetTick>
 8001d64:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7fe fd64 	bl	8000834 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e07f      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8a:	4a03      	ldr	r2, [pc, #12]	@ (8001d98 <HAL_RCC_OscConfig+0xcc8>)
 8001d8c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8001d90:	f023 0303 	bic.w	r3, r3, #3
 8001d94:	6293      	str	r3, [r2, #40]	@ 0x28
 8001d96:	e06f      	b.n	8001e78 <HAL_RCC_OscConfig+0xda8>
 8001d98:	46020c00 	.word	0x46020c00
 8001d9c:	46020800 	.word	0x46020800
 8001da0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001da4:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001daa:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dae:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d039      	beq.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0203 	and.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d132      	bne.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d129      	bne.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d122      	bne.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001df0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d11a      	bne.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	0a5b      	lsrs	r3, r3, #9
 8001dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e02:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d111      	bne.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	0c1b      	lsrs	r3, r3, #16
 8001e0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e14:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d108      	bne.n	8001e2c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	0e1b      	lsrs	r3, r3, #24
 8001e1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e26:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e024      	b.n	8001e7a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e34:	08db      	lsrs	r3, r3, #3
 8001e36:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d01a      	beq.n	8001e78 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001e42:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	4a0f      	ldr	r2, [pc, #60]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001e48:	f023 0310 	bic.w	r3, r3, #16
 8001e4c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fcf1 	bl	8000834 <HAL_GetTick>
 8001e52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001e54:	bf00      	nop
 8001e56:	f7fe fced 	bl	8000834 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d0f9      	beq.n	8001e56 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e66:	4a07      	ldr	r2, [pc, #28]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001e6c:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <HAL_RCC_OscConfig+0xdb4>)
 8001e72:	f043 0310 	orr.w	r3, r3, #16
 8001e76:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3738      	adds	r7, #56	@ 0x38
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	46020c00 	.word	0x46020c00

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e1d9      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e9c:	4b9b      	ldr	r3, [pc, #620]	@ (800210c <HAL_RCC_ClockConfig+0x284>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d910      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eaa:	4b98      	ldr	r3, [pc, #608]	@ (800210c <HAL_RCC_ClockConfig+0x284>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 020f 	bic.w	r2, r3, #15
 8001eb2:	4996      	ldr	r1, [pc, #600]	@ (800210c <HAL_RCC_ClockConfig+0x284>)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b94      	ldr	r3, [pc, #592]	@ (800210c <HAL_RCC_ClockConfig+0x284>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e1c1      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695a      	ldr	r2, [r3, #20]
 8001edc:	4b8c      	ldr	r3, [pc, #560]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d908      	bls.n	8001efa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001ee8:	4b89      	ldr	r3, [pc, #548]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	4986      	ldr	r1, [pc, #536]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	4b81      	ldr	r3, [pc, #516]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	091b      	lsrs	r3, r3, #4
 8001f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d909      	bls.n	8001f2c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001f18:	4b7d      	ldr	r3, [pc, #500]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	497a      	ldr	r1, [pc, #488]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	4b74      	ldr	r3, [pc, #464]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d908      	bls.n	8001f5a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b71      	ldr	r3, [pc, #452]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	496e      	ldr	r1, [pc, #440]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	4b69      	ldr	r3, [pc, #420]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d908      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001f76:	4b66      	ldr	r3, [pc, #408]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	f023 020f 	bic.w	r2, r3, #15
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	4963      	ldr	r1, [pc, #396]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80d2 	beq.w	800213a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	d143      	bne.n	800202a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d110      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fb0:	4b57      	ldr	r3, [pc, #348]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb6:	4a56      	ldr	r2, [pc, #344]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001fc0:	4b53      	ldr	r3, [pc, #332]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fc2f 	bl	8000834 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8002114 <HAL_RCC_ClockConfig+0x28c>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00f      	beq.n	8002004 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001fe6:	f7fe fc25 	bl	8000834 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e12b      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001ff8:	4b46      	ldr	r3, [pc, #280]	@ (8002114 <HAL_RCC_ClockConfig+0x28c>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 800200c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002010:	4a3f      	ldr	r2, [pc, #252]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8002012:	f023 0304 	bic.w	r3, r3, #4
 8002016:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d121      	bne.n	800206a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e112      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e106      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800204a:	4b31      	ldr	r3, [pc, #196]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0fa      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0f2      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	4926      	ldr	r1, [pc, #152]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800207c:	f7fe fbda 	bl	8000834 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7fe fbd2 	bl	8000834 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0d6      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d1ee      	bne.n	800208c <HAL_RCC_ClockConfig+0x204>
 80020ae:	e044      	b.n	800213a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d112      	bne.n	80020de <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7fe fbbb 	bl	8000834 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0bf      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 030c 	and.w	r3, r3, #12
 80020d8:	2b08      	cmp	r3, #8
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_ClockConfig+0x232>
 80020dc:	e02d      	b.n	800213a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d123      	bne.n	800212e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fba4 	bl	8000834 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0a8      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80020fe:	4b04      	ldr	r3, [pc, #16]	@ (8002110 <HAL_RCC_ClockConfig+0x288>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ee      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x260>
 800210a:	e016      	b.n	800213a <HAL_RCC_ClockConfig+0x2b2>
 800210c:	40022000 	.word	0x40022000
 8002110:	46020c00 	.word	0x46020c00
 8002114:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002118:	f7fe fb8c 	bl	8000834 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e090      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800212e:	4b4a      	ldr	r3, [pc, #296]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 030c 	and.w	r3, r3, #12
 8002136:	2b04      	cmp	r3, #4
 8002138:	d1ee      	bne.n	8002118 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4b43      	ldr	r3, [pc, #268]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	429a      	cmp	r2, r3
 8002154:	d208      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8002156:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	f023 020f 	bic.w	r2, r3, #15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	493d      	ldr	r1, [pc, #244]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002168:	4b3c      	ldr	r3, [pc, #240]	@ (800225c <HAL_RCC_ClockConfig+0x3d4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d210      	bcs.n	8002198 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b39      	ldr	r3, [pc, #228]	@ (800225c <HAL_RCC_ClockConfig+0x3d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 020f 	bic.w	r2, r3, #15
 800217e:	4937      	ldr	r1, [pc, #220]	@ (800225c <HAL_RCC_ClockConfig+0x3d4>)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b35      	ldr	r3, [pc, #212]	@ (800225c <HAL_RCC_ClockConfig+0x3d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e05b      	b.n	8002250 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d010      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68da      	ldr	r2, [r3, #12]
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d208      	bcs.n	80021c6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80021b4:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4925      	ldr	r1, [pc, #148]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d012      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	091b      	lsrs	r3, r3, #4
 80021dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d209      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80021e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4919      	ldr	r1, [pc, #100]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d010      	beq.n	8002226 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695a      	ldr	r2, [r3, #20]
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 800220a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002210:	429a      	cmp	r2, r3
 8002212:	d208      	bcs.n	8002226 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002214:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 8002216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002218:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	490d      	ldr	r1, [pc, #52]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002226:	f000 f821 	bl	800226c <HAL_RCC_GetSysClockFreq>
 800222a:	4602      	mov	r2, r0
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_ClockConfig+0x3d0>)
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	490a      	ldr	r1, [pc, #40]	@ (8002260 <HAL_RCC_ClockConfig+0x3d8>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <HAL_RCC_ClockConfig+0x3dc>)
 800223e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_RCC_ClockConfig+0x3e0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fa6b 	bl	8000720 <HAL_InitTick>
 800224a:	4603      	mov	r3, r0
 800224c:	73fb      	strb	r3, [r7, #15]

  return status;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3718      	adds	r7, #24
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	46020c00 	.word	0x46020c00
 800225c:	40022000 	.word	0x40022000
 8002260:	08002f1c 	.word	0x08002f1c
 8002264:	20000000 	.word	0x20000000
 8002268:	20000004 	.word	0x20000004

0800226c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b08b      	sub	sp, #44	@ 0x2c
 8002270:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8002272:	2300      	movs	r3, #0
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b78      	ldr	r3, [pc, #480]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b75      	ldr	r3, [pc, #468]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d121      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d11e      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80022a0:	4b6e      	ldr	r3, [pc, #440]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80022ac:	4b6b      	ldr	r3, [pc, #428]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022b2:	0b1b      	lsrs	r3, r3, #12
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022ba:	e005      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80022bc:	4b67      	ldr	r3, [pc, #412]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	0f1b      	lsrs	r3, r3, #28
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c8:	4a65      	ldr	r2, [pc, #404]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d110      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80022dc:	e00d      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022de:	4b5f      	ldr	r3, [pc, #380]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 030c 	and.w	r3, r3, #12
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d102      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80022ec:	623b      	str	r3, [r7, #32]
 80022ee:	e004      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80022f8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	2b0c      	cmp	r3, #12
 80022fe:	f040 80a5 	bne.w	800244c <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002302:	4b56      	ldr	r3, [pc, #344]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800230c:	4b53      	ldr	r3, [pc, #332]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800230e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3301      	adds	r3, #1
 8002318:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800231a:	4b50      	ldr	r3, [pc, #320]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002326:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232a:	08db      	lsrs	r3, r3, #3
 800232c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d003      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0xe4>
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b03      	cmp	r3, #3
 800234c:	d022      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x128>
 800234e:	e043      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8002468 <HAL_RCC_GetSysClockFreq+0x1fc>
 800235e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002362:	4b3e      	ldr	r3, [pc, #248]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002372:	ed97 6a01 	vldr	s12, [r7, #4]
 8002376:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 800246c <HAL_RCC_GetSysClockFreq+0x200>
 800237a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800237e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002386:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800238a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002392:	e046      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	ee07 3a90 	vmov	s15, r3
 800239a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8002468 <HAL_RCC_GetSysClockFreq+0x1fc>
 80023a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a6:	4b2d      	ldr	r3, [pc, #180]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ae:	ee07 3a90 	vmov	s15, r3
 80023b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80023ba:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800246c <HAL_RCC_GetSysClockFreq+0x200>
 80023be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80023c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023d6:	e024      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	ee07 3a90 	vmov	s15, r3
 80023e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002400:	ed97 6a01 	vldr	s12, [r7, #4]
 8002404:	eddf 5a19 	vldr	s11, [pc, #100]	@ 800246c <HAL_RCC_GetSysClockFreq+0x200>
 8002408:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800240c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002410:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002414:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002420:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002426:	0e1b      	lsrs	r3, r3, #24
 8002428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800242c:	3301      	adds	r3, #1
 800242e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800243a:	edd7 6a07 	vldr	s13, [r7, #28]
 800243e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002446:	ee17 3a90 	vmov	r3, s15
 800244a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 800244c:	6a3b      	ldr	r3, [r7, #32]
}
 800244e:	4618      	mov	r0, r3
 8002450:	372c      	adds	r7, #44	@ 0x2c
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	46020c00 	.word	0x46020c00
 8002460:	08002f2c 	.word	0x08002f2c
 8002464:	00f42400 	.word	0x00f42400
 8002468:	4b742400 	.word	0x4b742400
 800246c:	46000000 	.word	0x46000000

08002470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002474:	f7ff fefa 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002478:	4602      	mov	r2, r0
 800247a:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <HAL_RCC_GetHCLKFreq+0x28>)
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4906      	ldr	r1, [pc, #24]	@ (800249c <HAL_RCC_GetHCLKFreq+0x2c>)
 8002484:	5ccb      	ldrb	r3, [r1, r3]
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	4a05      	ldr	r2, [pc, #20]	@ (80024a0 <HAL_RCC_GetHCLKFreq+0x30>)
 800248c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800248e:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <HAL_RCC_GetHCLKFreq+0x30>)
 8002490:	681b      	ldr	r3, [r3, #0]
}
 8002492:	4618      	mov	r0, r3
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	46020c00 	.word	0x46020c00
 800249c:	08002f1c 	.word	0x08002f1c
 80024a0:	20000000 	.word	0x20000000

080024a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024ac:	4b3e      	ldr	r3, [pc, #248]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024ba:	f7fe fdfb 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 80024be:	6178      	str	r0, [r7, #20]
 80024c0:	e019      	b.n	80024f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024c8:	4a37      	ldr	r2, [pc, #220]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80024ca:	f043 0304 	orr.w	r3, r3, #4
 80024ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80024d2:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80024d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024e0:	f7fe fde8 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 80024e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024e6:	4b30      	ldr	r3, [pc, #192]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ec:	4a2e      	ldr	r2, [pc, #184]	@ (80025a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80024ee:	f023 0304 	bic.w	r3, r3, #4
 80024f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024fc:	d003      	beq.n	8002506 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002504:	d109      	bne.n	800251a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800250c:	d202      	bcs.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800250e:	2301      	movs	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002512:	e033      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002518:	e030      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002520:	d208      	bcs.n	8002534 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002528:	d102      	bne.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800252a:	2303      	movs	r3, #3
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e025      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e035      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800253a:	d90f      	bls.n	800255c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002548:	d902      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	e015      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002550:	2301      	movs	r3, #1
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e012      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	e00f      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002562:	d109      	bne.n	8002578 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800256a:	d102      	bne.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800256c:	2301      	movs	r3, #1
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	e004      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002572:	2302      	movs	r3, #2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	e001      	b.n	800257c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002578:	2301      	movs	r3, #1
 800257a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f023 020f 	bic.w	r2, r3, #15
 8002584:	4909      	ldr	r1, [pc, #36]	@ (80025ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800258c:	4b07      	ldr	r3, [pc, #28]	@ (80025ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 030f 	and.w	r3, r3, #15
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	46020c00 	.word	0x46020c00
 80025ac:	40022000 	.word	0x40022000

080025b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e049      	b.n	8002656 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe f820 	bl	800061c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3304      	adds	r3, #4
 80025ec:	4619      	mov	r1, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	f000 fa4e 	bl	8002a90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b01      	cmp	r3, #1
 8002672:	d001      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e072      	b.n	800275e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a35      	ldr	r2, [pc, #212]	@ (800276c <HAL_TIM_Base_Start_IT+0x10c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d040      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_TIM_Base_Start_IT+0x110>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d03b      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ac:	d036      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026b6:	d031      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_TIM_Base_Start_IT+0x114>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <HAL_TIM_Base_Start_IT+0x118>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d027      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2a      	ldr	r2, [pc, #168]	@ (800277c <HAL_TIM_Base_Start_IT+0x11c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a29      	ldr	r2, [pc, #164]	@ (8002780 <HAL_TIM_Base_Start_IT+0x120>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a27      	ldr	r2, [pc, #156]	@ (8002784 <HAL_TIM_Base_Start_IT+0x124>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a26      	ldr	r2, [pc, #152]	@ (8002788 <HAL_TIM_Base_Start_IT+0x128>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a24      	ldr	r2, [pc, #144]	@ (800278c <HAL_TIM_Base_Start_IT+0x12c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a23      	ldr	r2, [pc, #140]	@ (8002790 <HAL_TIM_Base_Start_IT+0x130>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a21      	ldr	r2, [pc, #132]	@ (8002794 <HAL_TIM_Base_Start_IT+0x134>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_TIM_Base_Start_IT+0xbc>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a20      	ldr	r2, [pc, #128]	@ (8002798 <HAL_TIM_Base_Start_IT+0x138>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d115      	bne.n	8002748 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <HAL_TIM_Base_Start_IT+0x13c>)
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2b06      	cmp	r3, #6
 800272c:	d015      	beq.n	800275a <HAL_TIM_Base_Start_IT+0xfa>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002734:	d011      	beq.n	800275a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f042 0201 	orr.w	r2, r2, #1
 8002744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002746:	e008      	b.n	800275a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e000      	b.n	800275c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40012c00 	.word	0x40012c00
 8002770:	50012c00 	.word	0x50012c00
 8002774:	40000400 	.word	0x40000400
 8002778:	50000400 	.word	0x50000400
 800277c:	40000800 	.word	0x40000800
 8002780:	50000800 	.word	0x50000800
 8002784:	40000c00 	.word	0x40000c00
 8002788:	50000c00 	.word	0x50000c00
 800278c:	40013400 	.word	0x40013400
 8002790:	50013400 	.word	0x50013400
 8002794:	40014000 	.word	0x40014000
 8002798:	50014000 	.word	0x50014000
 800279c:	00010007 	.word	0x00010007

080027a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0202 	mvn.w	r2, #2
 80027d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f931 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f923 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f934 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d020      	beq.n	8002850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0204 	mvn.w	r2, #4
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f90b 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8fd 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f90e 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0208 	mvn.w	r2, #8
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2204      	movs	r2, #4
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f003 0303 	and.w	r3, r3, #3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8e5 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f8d7 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f8e8 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d020      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0210 	mvn.w	r2, #16
 80028b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2208      	movs	r2, #8
 80028be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f8bf 	bl	8002a52 <HAL_TIM_IC_CaptureCallback>
 80028d4:	e005      	b.n	80028e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 f8b1 	bl	8002a3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8c2 	bl	8002a66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0201 	mvn.w	r2, #1
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fd fda6 	bl	8000458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002912:	2b00      	cmp	r3, #0
 8002914:	d104      	bne.n	8002920 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00c      	beq.n	800293a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d007      	beq.n	800293a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa7d 	bl	8002e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00c      	beq.n	800295e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fa75 	bl	8002e48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00c      	beq.n	8002982 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d007      	beq.n	8002982 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800297a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f87c 	bl	8002a7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00c      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d007      	beq.n	80029a6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0220 	mvn.w	r2, #32
 800299e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa3d 	bl	8002e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00c      	beq.n	80029ca <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d007      	beq.n	80029ca <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80029c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fa49 	bl	8002e5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00c      	beq.n	80029ee <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fa41 	bl	8002e70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00c      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8002a0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fa39 	bl	8002e84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00c      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8002a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 fa31 	bl	8002e98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a46:	bf00      	nop
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b083      	sub	sp, #12
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c5c <TIM_Base_SetConfig+0x1cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d02b      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a6d      	ldr	r2, [pc, #436]	@ (8002c60 <TIM_Base_SetConfig+0x1d0>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d027      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ab6:	d023      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002abe:	d01f      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a68      	ldr	r2, [pc, #416]	@ (8002c64 <TIM_Base_SetConfig+0x1d4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d01b      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a67      	ldr	r2, [pc, #412]	@ (8002c68 <TIM_Base_SetConfig+0x1d8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d017      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a66      	ldr	r2, [pc, #408]	@ (8002c6c <TIM_Base_SetConfig+0x1dc>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a65      	ldr	r2, [pc, #404]	@ (8002c70 <TIM_Base_SetConfig+0x1e0>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00f      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a64      	ldr	r2, [pc, #400]	@ (8002c74 <TIM_Base_SetConfig+0x1e4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00b      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a63      	ldr	r2, [pc, #396]	@ (8002c78 <TIM_Base_SetConfig+0x1e8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a62      	ldr	r2, [pc, #392]	@ (8002c7c <TIM_Base_SetConfig+0x1ec>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d003      	beq.n	8002b00 <TIM_Base_SetConfig+0x70>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a61      	ldr	r2, [pc, #388]	@ (8002c80 <TIM_Base_SetConfig+0x1f0>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d108      	bne.n	8002b12 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a51      	ldr	r2, [pc, #324]	@ (8002c5c <TIM_Base_SetConfig+0x1cc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d043      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <TIM_Base_SetConfig+0x1d0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d03f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b28:	d03b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b30:	d037      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	@ (8002c64 <TIM_Base_SetConfig+0x1d4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d033      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c68 <TIM_Base_SetConfig+0x1d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d02f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a49      	ldr	r2, [pc, #292]	@ (8002c6c <TIM_Base_SetConfig+0x1dc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d02b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a48      	ldr	r2, [pc, #288]	@ (8002c70 <TIM_Base_SetConfig+0x1e0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d027      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a47      	ldr	r2, [pc, #284]	@ (8002c74 <TIM_Base_SetConfig+0x1e4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d023      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a46      	ldr	r2, [pc, #280]	@ (8002c78 <TIM_Base_SetConfig+0x1e8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a45      	ldr	r2, [pc, #276]	@ (8002c7c <TIM_Base_SetConfig+0x1ec>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d01b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a44      	ldr	r2, [pc, #272]	@ (8002c80 <TIM_Base_SetConfig+0x1f0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d017      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a43      	ldr	r2, [pc, #268]	@ (8002c84 <TIM_Base_SetConfig+0x1f4>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a42      	ldr	r2, [pc, #264]	@ (8002c88 <TIM_Base_SetConfig+0x1f8>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a41      	ldr	r2, [pc, #260]	@ (8002c8c <TIM_Base_SetConfig+0x1fc>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a40      	ldr	r2, [pc, #256]	@ (8002c90 <TIM_Base_SetConfig+0x200>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a3f      	ldr	r2, [pc, #252]	@ (8002c94 <TIM_Base_SetConfig+0x204>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0x112>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a3e      	ldr	r2, [pc, #248]	@ (8002c98 <TIM_Base_SetConfig+0x208>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a20      	ldr	r2, [pc, #128]	@ (8002c5c <TIM_Base_SetConfig+0x1cc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d023      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <TIM_Base_SetConfig+0x1d0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d01f      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a24      	ldr	r2, [pc, #144]	@ (8002c7c <TIM_Base_SetConfig+0x1ec>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d01b      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a23      	ldr	r2, [pc, #140]	@ (8002c80 <TIM_Base_SetConfig+0x1f0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d017      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a22      	ldr	r2, [pc, #136]	@ (8002c84 <TIM_Base_SetConfig+0x1f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d013      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a21      	ldr	r2, [pc, #132]	@ (8002c88 <TIM_Base_SetConfig+0x1f8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00f      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a20      	ldr	r2, [pc, #128]	@ (8002c8c <TIM_Base_SetConfig+0x1fc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00b      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	@ (8002c90 <TIM_Base_SetConfig+0x200>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c94 <TIM_Base_SetConfig+0x204>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_Base_SetConfig+0x198>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a1d      	ldr	r2, [pc, #116]	@ (8002c98 <TIM_Base_SetConfig+0x208>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d103      	bne.n	8002c30 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d105      	bne.n	8002c4e <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f023 0201 	bic.w	r2, r3, #1
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	611a      	str	r2, [r3, #16]
  }
}
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	50012c00 	.word	0x50012c00
 8002c64:	40000400 	.word	0x40000400
 8002c68:	50000400 	.word	0x50000400
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	50000800 	.word	0x50000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	50000c00 	.word	0x50000c00
 8002c7c:	40013400 	.word	0x40013400
 8002c80:	50013400 	.word	0x50013400
 8002c84:	40014000 	.word	0x40014000
 8002c88:	50014000 	.word	0x50014000
 8002c8c:	40014400 	.word	0x40014400
 8002c90:	50014400 	.word	0x50014400
 8002c94:	40014800 	.word	0x40014800
 8002c98:	50014800 	.word	0x50014800

08002c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e097      	b.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a45      	ldr	r2, [pc, #276]	@ (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00e      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a44      	ldr	r2, [pc, #272]	@ (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a42      	ldr	r2, [pc, #264]	@ (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a41      	ldr	r2, [pc, #260]	@ (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d040      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2e      	ldr	r2, [pc, #184]	@ (8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d03b      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d036      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d52:	d031      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a29      	ldr	r2, [pc, #164]	@ (8002e00 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02c      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a28      	ldr	r2, [pc, #160]	@ (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d027      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a26      	ldr	r2, [pc, #152]	@ (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d022      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a25      	ldr	r2, [pc, #148]	@ (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d01d      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a23      	ldr	r2, [pc, #140]	@ (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d018      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a22      	ldr	r2, [pc, #136]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a18      	ldr	r2, [pc, #96]	@ (8002df8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00e      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d10c      	bne.n	8002dd2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	40012c00 	.word	0x40012c00
 8002df4:	50012c00 	.word	0x50012c00
 8002df8:	40013400 	.word	0x40013400
 8002dfc:	50013400 	.word	0x50013400
 8002e00:	40000400 	.word	0x40000400
 8002e04:	50000400 	.word	0x50000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	50000800 	.word	0x50000800
 8002e10:	40000c00 	.word	0x40000c00
 8002e14:	50000c00 	.word	0x50000c00
 8002e18:	40014000 	.word	0x40014000
 8002e1c:	50014000 	.word	0x50014000

08002e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <memset>:
 8002eac:	4402      	add	r2, r0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d100      	bne.n	8002eb6 <memset+0xa>
 8002eb4:	4770      	bx	lr
 8002eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eba:	e7f9      	b.n	8002eb0 <memset+0x4>

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ef4 <__libc_init_array+0x38>)
 8002ec0:	2600      	movs	r6, #0
 8002ec2:	4c0d      	ldr	r4, [pc, #52]	@ (8002ef8 <__libc_init_array+0x3c>)
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8002efc <__libc_init_array+0x40>)
 8002ece:	2600      	movs	r6, #0
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	@ (8002f00 <__libc_init_array+0x44>)
 8002ed2:	f000 f817 	bl	8002f04 <_init>
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	3601      	adds	r6, #1
 8002ee6:	4798      	blx	r3
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	3601      	adds	r6, #1
 8002ef0:	4798      	blx	r3
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	08002fec 	.word	0x08002fec
 8002ef8:	08002fec 	.word	0x08002fec
 8002efc:	08002fec 	.word	0x08002fec
 8002f00:	08002ff0 	.word	0x08002ff0

08002f04 <_init>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

08002f10 <_fini>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	bf00      	nop
 8002f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f16:	bc08      	pop	{r3}
 8002f18:	469e      	mov	lr, r3
 8002f1a:	4770      	bx	lr
